
: 
  : set "<<" "$op_move_left"
  : set ">>" "$op_move_right"
  : set "<-" "$op_arrow_left"
  : set "->" "$op_arrow_right"
  : set "<<<" "$op_move_l_left"
  : set ">>>" "$op_move_l_right"
  : set "<>" "$op_left_right"
  : set "void" ([ --- ] void)
  : set "run" ([ function ] function void)
  : set "__equals" equals
  : set "equals" ([ left ] ([ right ] __if ( __equals left right ) true false))
  : set "true" ([ first ] ([ second ] first))
  : set "false" ([ first ] ([ second ] second))
  : set "__if" if
  : set "if" ([ condition ] ([ on_true ] ([ on_false ] condition on_true on_false)))
  : set "bool" ([ value ] __if value true false)
  : set "bti" ([ value ] value 1 0)
  : set "bts" ([ value ] value "true" "false")
  : set "not" ([ a ] a false true)
  : set "and" ([ a ] ([ b ] a b a))
  : set "or" ([ a ] ([ b ] a a b))
  : set "xor" ([ a ] ([ b ] a ( not b ) b))
  : set "id" ([ value ] value)
  : set "compose" ([ f ] ([ g ] ([ arg ] f ( g arg ))))
  : set "@" compose
  : set "arg_swap" ([ function ] ([ a ] ([ b ] function b a)))
  : set "power" ([ _power ] ([ function ] ([ value ] run ( __if _power ([ --- ] function ( power ( - _power 1 ) function value )) ([ --- ] value) ))))
  : set "pbool" ([ value ] print ( bts value ))
  : set "is_positive" ([ number ] bool ( + number ( abs number ) ))
  : set "is_negative" ([ number ] bool ( - number ( abs number ) ))
  : set "is_zero" ([ number ] not ( bool number ))
  : set "sign" ([ number ] - ( bti ( is_positive number ) ) ( bti ( is_negative number ) ))
  : set "is_greater" ([ a ] ([ b ] is_positive ( - a b )))
  : set "is_less" ([ a ] ([ b ] is_negative ( - a b )))
  : set "is_equal" ([ a ] ([ b ] is_zero ( - a b )))
  : set "loop" ([ times ] ([ code ] 
        : set "__loop" ([ from ] ([ times ] ([ code ] 
                : __if times code void ( - from times )
                : __if times __loop void from ( - times 1 ) code)))
        : run ( if ( is_positive times ) ([ --- ] __loop ( int times ) ( int times ) code) id )))
  : set "while" ([ condition ] ([ code ] run ( if ( run condition ) ([ --- ] 
          : run code
          : while condition code) void )))
  : set "_$tests_total" void
  : set "_$tests_passed" void
  : set "test" ([ title ] ([ code ] 
        : puts "\n===---   " title "   ---===\n"
        : set "_$tests_total" 0
        : set "_$tests_passed" 0
        : run code
        : puts "\nTests passed: " _$tests_passed " / " _$tests_total "\n"))
  : set "describe" ([ title ] ([ code ] 
        : puts "\nTesting #" title "\n"
        : run code))
  : set "assert_equals" ([ expected ] ([ actual ] ([ message ] run ( 
          : set "_$tests_total" ( + _$tests_total 1 )
          : if ( not ( equals expected actual ) ) ([ --- ] puts "  FAILED...\n    Expected " expected " but got " actual "\n    Message: " message "\n") ([ --- ] 
              : puts "  passed - " message "\n"
              : set "_$tests_passed" ( + _$tests_passed 1 )) ))))
  : set "functions_tests" ([ --- ] 
      : set "factorial" ([ n ] run ( if ( equals n 0 ) ([ --- ] 1) ([ --- ] * n ( factorial ( - n 1 ) )) ))
      : set "value" void
      : set "return_from_global" ([ --- ] value)
      : set "context_parent" ([ value ] run ([ --- ] value))
      : set "context_parent_global" ([ value ] run return_from_global)
      : test "functions" ([ --- ] 
          : describe "context_parent" ([ --- ] 
              : assert_equals 42 ( context_parent 42 ) "return integer (42)"
              : assert_equals "foo" ( context_parent "foo" ) "return string  (foo)"
              : assert_equals test ( context_parent test ) "return function(test)"
              : assert_equals void ( context_parent_global 42 ) "return void (ignore integer (42))"
              : assert_equals void ( context_parent_global "foo" ) "return void (ignore string  (foo))"
              : assert_equals void ( context_parent_global test ) "return void (ignore function(test))")
          : describe "factorial" ([ --- ] 
              : assert_equals 1 ( factorial 0 ) "0! == 1"
              : assert_equals 1 ( factorial 1 ) "1! == 1"
              : assert_equals 6 ( factorial 3 ) "3! == 6"
              : assert_equals 120 ( factorial 5 ) "5! == 120"
              : assert_equals 362880 ( factorial 9 ) "9! == 362880")))
  : set "builtins_tests" ([ --- ] test "built-ins" ([ --- ] 
        : describe "math" ([ --- ] 
            : assert_equals 10 ( + 0 10 ) "0 + 10 == 10"
            : assert_equals 10 ( + 3 7 ) "3 + 7 == 10"
            : assert_equals 3 ( - 10 7 ) "10 - 7 == 3"
            : assert_equals 12 ( * 3 4 ) "3 * 4 == 12"
            : assert_equals 4 ( / 12 3 ) "12 / 3 == 4"
            : assert_equals 3 ( % 17 7 ) "17 % 7 == 3")
        : describe "convertion" ([ --- ] 
            : assert_equals 10 ( int "10" ) "convert string to integer"
            : assert_equals 10 ( int "10.5" ) "convert string with trailing symbols to integer"
            : assert_equals 10 ( int 10.5 ) "convert decimal numbers to integers"
            : assert_equals 10.5 ( number "10.5" ) "convert string to decimal number"
            : assert_equals "1" ( string 1 ) "convert numbers to string")))
  : set "default" ([ type ] type void)
  : set "typeof" ([ object ] object "__type")
  : set "__types" void
  : run ([ --- ] 
      : set "__$setter" set
      : set "__$getter" get
      : set "__types" ([ action ] if ( equals action <- ) ([ name ] __$setter ( + "__$t_" name )) ( if ( equals action -> ) ([ name ] __$getter ( + "__$t_" name )) void )))
  : set "Type" ([ name ] ([ describer ] 
        : set "__$type_name" name
        : set "__$type_set" set
        : set "__$type_get" get
        : set "__$type_props_count" 0
        : set "__$type_add_prop" ([ name ] 
            : __$type_set ( + "__$type_var_" __$type_props_count ) name
            : __$type_set ( + "__$type_exs_" name ) true
            : __$type_set "__$type_props_count" ( + __$type_props_count 1 )
            : __$type_set ( + "__$type_val_" ( - __$type_props_count 1 ) ) void
            : __$type_set ( + "__$type_val_" ( - __$type_props_count 1 ) ))
        : __$type_add_prop <-
        : __$type_add_prop ->
        : describer __$type_add_prop
        : set "__$type_constructor" ([ constructor ] 
            : set "__$object_set" set
            : set "__$object_get" get
            : set "__$object_set_u" ([ name ] run ( if ( equals true ( __$type_get ( + "__$type_exs_" name ) ) ) ([ --- ] __$object_set ( + "__$object_var_" name )) ([ --- ] 
                  : puts "\nERROR: Object of type '" __$type_name "' does not contains a property named '" name "'\n"
                  : void) ))
            : set "__$object_get_u" ([ name ] run ( if ( equals true ( __$type_get ( + "__$type_exs_" name ) ) ) ([ --- ] __$object_get ( + "__$object_var_" name )) ([ --- ] 
                  : puts "\nERROR: Object of type '" __$type_name "' does not contains a property named '" name "'\n"
                  : void) ))
            : __$type_set ( + "__$type_val_" 0 ) __$object_set_u
            : __$type_set ( + "__$type_val_" 1 ) __$object_get_u
            : loop __$type_props_count ([ property_index ] __$object_set_u ( __$type_get ( + "__$type_var_" property_index ) ) ( __$type_get ( + "__$type_val_" property_index ) ))
            : ([ object ] 
                : constructor object
                : object) ([ action ] run ( if ( equals action "__type" ) ([ --- ] __types -> name) ([ --- ] __$object_get_u action) )))
        : __types <- name ([ action ] run ( if ( equals action "name" ) ([ --- ] name) ( if ( equals action "constructor" ) ([ --- ] __$type_constructor) void ) ))
        : __$type_constructor))
  : set "ArrayType" ( Type "Array" ([ declare_property ] 
      : declare_property "is_empty" true
      : declare_property "length" 0
      : declare_property "raw" ([ getter ] getter true void void)
      : declare_property "top" void
      : declare_property "push" void
      : declare_property "pop" void
      : declare_property << void) )
  : set "Array" ([ --- ] ArrayType ([ self ] 
        : self <- "push" ([ value ] 
            : self <- "length" ( + ( self -> "length" ) 1 )
            : self <- "is_empty" false
            : self <- "top" value
            : set "__raw" ( self -> "raw" )
            : self <- "raw" ([ getter ] getter false value __raw)
            : self)
        : self <- "pop" ([ --- ] run ( if ( self -> "is_empty" ) ([ --- ] 
              : puts "\nERROR: Can not pop element from an empty array!\n"
              : false) ([ --- ] 
              : self <- "length" ( - ( self -> "length" ) 1 )
              : self <- "is_empty" ( equals ( self -> "length" ) 0 )
              : self <- "raw" ( self "raw" ([ _ ] ([ _ ] ([ # ] #))) )
              : self <- "top" ( self "raw" ([ _ ] ([ # ] ([ _ ] #))) )
              : true) ))
        : self <- << ( self -> "push" )))
  : set "map" ([ function ] ([ array ] ([ new_array ] 
          : set "__map" ([ function ] ([ array_raw ] run ( if ( array_raw ([ # ] ([ _ ] ([ _ ] #))) ) void ([ --- ] 
                  : __map function ( array_raw ([ _ ] ([ _ ] ([ # ] #))) )
                  : new_array << ( function ( array_raw ([ _ ] ([ # ] ([ _ ] #))) ) )) )))
          : __map function ( array -> "raw" )
          : new_array) ( default Array )))
  : set "reduce" ([ function ] ([ accumulator ] ([ array ] 
          : foreach ([ value ] set "accumulator" ( function accumulator value )) array
          : accumulator)))
  : set "foreach" ([ function ] ([ array ] 
        : set "__foreach" ([ function ] ([ array_raw ] run ( if ( array_raw ([ # ] ([ _ ] ([ _ ] #))) ) void ([ --- ] 
                : __foreach function ( array_raw ([ _ ] ([ _ ] ([ # ] #))) )
                : function ( array_raw ([ _ ] ([ # ] ([ _ ] #))) )) )))
        : __foreach function ( array -> "raw" )))
  : set "enumerate" ([ from ] ([ to ] ([ step ] ([ array_new ] 
            : while ([ --- ] is_positive ( * ( sign ( - to from ) ) ( sign step ) )) ([ --- ] 
                : array_new << from
                : set "from" ( + from step ))
            : array_new) ( default Array ))))
  : set "PairType" ( Type "Pair" ([ declare_property ] 
      : declare_property "first"
      : declare_property "second") )
  : set "Pair" ([ --- ] default PairType)
  : set "PairOf" ([ a ] ([ b ] PairType ([ self ] 
          : self <- "first" a
          : self <- "second" b)))
  : set "curry" ([ function ] ([ a ] ([ b ] function ( PairOf a b ))))
  : set "uncurry" ([ function ] ([ pair ] function ( pair "first" ) ( pair "second" )))
  : set "pair_swap" ([ pair ] PairOf ( pair "second" ) ( pair "first" ))
  : set "ppair" ([ pair ] puts "(" ( pair "first" ) ", " ( pair "second" ) ")\n")
  : set "std_tests" ([ --- ] test "std" ([ --- ] 
        : describe "array" ([ --- ] 
            : set "a" ( default Array )
            : assert_equals 0 ( a -> "length" ) "empty array's length should be 0"
            : assert_equals true ( a "is_empty" ) "array 'is_empty' should be true on initialization"
            : a << 5 << 3 << 1
            : assert_equals 3 ( a -> "length" ) "array's length after 3 pushes should be equal to 3"
            : assert_equals false ( a "is_empty" ) "array 'is_empty' should be false after elements addition"
            : a << 42
            : run ( a "pop" )
            : assert_equals 3 ( a -> "length" ) "remove top element from the array"
            : assert_equals "531" ( reduce + "" a ) "reduce an array to a string '531'"
            : assert_equals 108 ( reduce + 99 a ) "reduce an array to an int '108' by addition with base 99"
            : assert_equals 15 ( reduce * 1 a ) "reduce an array to an int '15' by multiplication from 1"
            : set "b" ( map ( + 2 ) a )
            : assert_equals "753" ( reduce + "" b ) "reduce an array to a string '753' by mapping with (+ 2)"
            : set "c" ( enumerate 1 11 2 )
            : assert_equals 5 ( c -> "length" ) "enumeration from 1 to 11 with step 2 exclusive has 5 elements"
            : assert_equals "13579" ( reduce + "" c ) "enumeration from 1 to 11 with step 2 is '13579'"
            : set "d" ( enumerate 9 ( - 0 1 ) ( - 0 2 ) )
            : assert_equals 5 ( d -> "length" ) "enumeration from 9 to -1 with step -2 exclusive has 5 elements"
            : assert_equals "97531" ( reduce + "" d ) "enumeration from 9 to -1 with step -2 is '97531'"
            : set "e" ( enumerate 0 500 1 )
            : assert_equals 500 ( e -> "length" ) "big arrays from enumeration (100 elements)"
            : set "em" ( map ( + " " ) e )
            : assert_equals 500 ( e -> "length" ) "big arrays mapping (100 elements)"
            : set "es" ( reduce + "array: [" em ))
        : describe "pair" ([ --- ] 
            : set "p" ( PairOf "a" "b" )
            : set "q" ( PairOf "b" "a" )
            : assert_equals "a" ( p "first" ) "(a, b).first == a"
            : assert_equals "b" ( p "second" ) "(a, b).second == b"
            : assert_equals false ( equals p q ) "(a, b) != (b, a)"
            : set "p" ( pair_swap p )
            : assert_equals "b" ( p "first" ) "(b, a).first == b"
            : assert_equals "a" ( p "second" ) "(b, a).second == a"
            : assert_equals true ( equals p q ) "(b, a) == (b, a)"
            : set "_gf" ([ a ] ([ b ] a))
            : set "_gfu" ( uncurry _gf )
            : set "_gfuc" ([ p ] p "first")
            : set "_gfc" ( curry _gfuc )
            : assert_equals "b" ( _gfu p ) "uncurry ([a][b] a) (b, a) == b"
            : assert_equals "a" ( _gfc "a" "b" ) "curry ([p] p.first) a b == b")))
  : set "types_tests" ([ args ] test "types" ([ --- ] 
        : set "Vector" ( Type "Vector" ([ declare_property ] 
            : declare_property "x" 0
            : declare_property "y" 0
            : declare_property "z" 0) )
        : set "VectorZero" ([ --- ] default Vector)
        : set "VectorOne" ([ --- ] Vector ([ self ] 
              : self <- "x" 1
              : self <- "y" 1
              : self <- "z" 1))
        : describe "creation" ([ --- ] 
            : set "a" ( default VectorZero )
            : set "b" ( default VectorZero )
            : set "c" ( default VectorOne )
            : assert_equals "Vector" ( typeof a "name" ) "(typeof a).name == 'Vector'"
            : assert_equals "Vector" ( typeof b "name" ) "(typeof b).name == 'Vector'"
            : assert_equals "Vector" ( typeof c "name" ) "(typeof c).name == 'Vector'"
            : assert_equals true ( equals a b ) "2 Vector zero should have the same value. (0, 0, 0) == (0, 0, 0)"
            : assert_equals false ( equals a c ) "Vector zero should be different from Vector one. (0, 0, 0) != (1, 1, 1)"
            : a <- "x" 1
            : assert_equals false ( equals a b ) "Vectors should not be be equal after change. (0, 0, 0) != (1, 0, 0)"
            : b <- "x" 1
            : assert_equals true ( equals a b ) "Vectors should be equal after change. (1, 0, 0) == (1, 0, 0)"
            : assert_equals 1 ( a -> "x" ) "Getters should return actual values. (1, 0, 0).x == 1"
            : assert_equals 0 ( a -> "y" ) "Getters should return actual values. (1, 0, 0).y == 0"
            : assert_equals 0 ( a -> "z" ) "Getters should return actual values. (1, 0, 0).z == 0"
            : set "d" a
            : assert_equals true ( equals a d ) "ref copied vector should be equal to the original. (1, 0, 0) == (1, 0, 0)"
            : d <- "z" 4
            : assert_equals true ( equals a d ) "ref copy should change the base value")))
  : set "main" ([ args ] 
      : run functions_tests
      : run builtins_tests
      : run std_tests
      : run types_tests)