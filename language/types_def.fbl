: include "core.fbl"
: include "tools.fbl"


: def "default" ([ type ] type void)
: def "typeof" ([ object ] object "__type")


: def "__types" void
: run ([ --- ]
    : def "__$setter" set
    : def "__$getter" get

    : ( set "__types" [ action ]
        if (equals action <-)
            ([ name ] __$setter (+ "__$t_" name))
        (if (equals action ->)
            ([ name ] __$getter (+ "__$t_" name))
            (void)
        )
    )
)


: ( def "Type" [ name ] [ describer ]
    : def "__$type_name" name
    : def "__$type_def" def
    : def "__$type_set" set
    : def "__$type_get" get
    : def "__$type_props_count" 0

    : def "__$type_add_prop" ( [ name ]
        : __$type_def (+ "__$type_var_" __$type_props_count) name
        : __$type_def (+ "__$type_exs_" name) true
        : __$type_set "__$type_props_count" (+ __$type_props_count 1)
        : __$type_def (+ "__$type_val_" (- __$type_props_count 1)) void
        : __$type_set (+ "__$type_val_" (- __$type_props_count 1))
    )

    : __$type_add_prop <-
    : __$type_add_prop ->
    : __$type_add_prop "to_string"
    : describer __$type_add_prop

    ` We should return the type instantiator (object constructor)
    : def "__$type_constructor" ([ constructor ]
        : def "__$object_set" set
        : def "__$object_get" get

        : def "__$object_set_u" ( [ name ] run (
            if (equals true (__$type_get (+ "__$type_exs_" name)))
                ([ --- ] __$object_set (+ "__$object_var_" name))
                ([ --- ]
                    : puts "\nERROR: Object of type '" __$type_name "' does not contains a property named '" name "'\n"
                    : void  ` Return no value because of the error
                )
        ))
        : def "__$object_get_u" ( [ name ] run (
            if (equals true (__$type_get (+ "__$type_exs_" name)))
                ([ --- ] __$object_get (+ "__$object_var_" name))
                ([ --- ]
                    : puts "\nERROR: Object of type '" __$type_name "' does not contains a property named '" name "'\n"
                    : void  ` Return no value because of the error
                )
        ))

        : loop __$type_props_count ([ property_index ]
            : __$object_set_u
                (__$type_get (+ "__$type_var_" property_index))
                (__$type_get (+ "__$type_val_" property_index))
        )

        : __$object_set_u (__$type_get (+ "__$type_var_" 0)) __$object_set_u
        : __$object_set_u (__$type_get (+ "__$type_var_" 1)) __$object_get_u
        : __$object_set_u (__$type_get (+ "__$type_var_" 2)) ([ --- ]
            : def "__$_obj_str-repr" (+ __$type_name "{ ")
            : loop (- __$type_props_count 3) ([ property_index ]
                : def "__$_current-name" (__$type_get (+ "__$type_var_" (+ property_index 3)))
                : set "__$_obj_str-repr" (+ __$_obj_str-repr __$_current-name)
                : set "__$_obj_str-repr" (+ (+ __$_obj_str-repr ": ") (__$object_get_u __$_current-name))
                : set "__$_obj_str-repr" (+ __$_obj_str-repr " ")  
            )
            : (+ __$_obj_str-repr "}")
        )

        : (([ object ] constructor object : object)
            ([ action ] run (
                if (equals action "__type")
                    ([ --- ] __types -> name)
                    ([ --- ] __$object_get_u action)
            ))
        )
    )

    ` Register information about newly created type
    : __types <- name ( [ action ] run (
        if (equals action "name")
            ([ --- ] name)
        (if (equals action "constructor")
            ([ --- ] __$type_constructor)
            void
        )
    ))

    ` Return the constructor
    : __$type_constructor
)
