: include "core.fbl"
: include "tools.fbl"

: include "array.fbl"
: include "pair.fbl"
: include "maybe.fbl"

: include "testing.fbl"


: ( set "std_tests" [ --- ]
    : test "std" ([ --- ]
        : describe "array" ([ --- ]
            : set "a" (default Array)
            : assert_equals 0 (a -> "length")      "empty array's length should be 0"
            : assert_equals true (a "is_empty")    "array 'is_empty' should be true on initialization"

            : a << 5 << 3 << 1

            : assert_equals 3 (a -> "length")      "array's length after 3 pushes should be equal to 3"
            : assert_equals false (a "is_empty")   "array 'is_empty' should be false after elements addition"

            : a << 42
            : run (a "pop")
            : assert_equals 3 (a -> "length")      "remove top element from the array"

            : assert_equals "531" (reduce + "" a)  "reduce an array to a string '531'"
            : assert_equals  108  (reduce + 99 a)  "reduce an array to an int '108' by addition with base 99"
            : assert_equals   15  (reduce *  1 a)  "reduce an array to an int '15' by multiplication from 1"

            : set "b" (map (+ 2) a)
            : assert_equals "753" (reduce + "" b)  "reduce an array to a string '753' by mapping with (+ 2)"


            : set "c" (enumerate 1 11 2)
            : assert_equals 5 (c -> "length")        "enumeration from 1 to 11 with step 2 exclusive has 5 elements"
            : assert_equals "13579" (reduce + "" c)  "enumeration from 1 to 11 with step 2 is '13579'"

            : set "d" (enumerate 9 (- 0 1) (- 0 2))
            : assert_equals 5 (d -> "length")        "enumeration from 9 to -1 with step -2 exclusive has 5 elements"
            : assert_equals "97531" (reduce + "" d)  "enumeration from 9 to -1 with step -2 is '97531'"

            : set "e" (enumerate 0 500 1)
            : assert_equals 500 (e -> "length")      "big arrays from enumeration (100 elements)"
            : set "em" (map (+ " ") e)
            : assert_equals 500 (e -> "length")      "big arrays mapping (100 elements)"
            : set "es" (reduce + "array: [" em)
        )

        : describe "pair" ([ --- ]
            : set "p" (PairOf "a" "b")
            : set "q" (PairOf "b" "a")

            : assert_equals "Pair" (typeof p "name") "typeof (a, b) == 'Pair'"
            : assert_equals false (equals (p <-) (q <-)) "`=` operator is different for pair instances"

            : assert_equals "a" (p "first")    "(a, b).first == a"
            : assert_equals "b" (p "second")   "(a, b).second == b"
            : assert_equals false (equals p q) "(a, b) != (b, a)"

            : set "p" (pair_swap p)
            : assert_equals "b" (p "first")    "(b, a).first == b"
            : assert_equals "a" (p "second")   "(b, a).second == a"
            : assert_equals true (equals p q)  "(b, a) == (b, a)"

            : set "_gf" ([ a ] [ b ] a)
            : set "_gfu" (uncurry _gf)
            : set "_gfuc" ([ p ] p "first")
            : set "_gfc" (curry _gfuc)

            : assert_equals "b" (_gfu p)       "uncurry ([a][b] a) (b, a) == b"
            : assert_equals "a" (_gfc "a" "b") "curry ([p] p.first) a b == b"
        )

        : describe "maybe" ([ --- ]
            : set "x" (Just 5)
            : set "y" (Just 7)
            : set "z" (default Nothing)

            : assert_equals "Maybe" (typeof x "name")  "typeof (Just a) == 'Maybe'"
            : assert_equals 5 (x "value")              "(Just a).value == a"
            : assert_equals void (z "value")           "(Nothing).value == void"

            : set "pipe_a" ([ x ] maybe (default Nothing) ([ v ] Just (string (x "value"))) x )
            : set "pipe_b" ([ x ] maybe (default Nothing) ([ v ] Just (+ (v "value") 1)) x )

            : assert_equals "6" (x >>= pipe_b >>= pipe_a "value") "Just 5 >>= (+ 1) >>= string  ==  Just '6'"
            : assert_equals (Just "51") (x >>= pipe_a >>= pipe_b) "Just 5 >>= string >>= (+ 1) ==  Just '51'"
            : assert_equals (default Nothing) (z >>= pipe_a >>= pipe_b) "Nothing >>= (+ 1) >>= string == Nothing"
        )
    )
)
